{"version":3,"sources":["components/titles.js","components/forms.js","components/weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","React","Component","Forms","onSubmit","this","props","getWeatherData","type","name","placeholder","Weather","city","country","className","temperature","description","humidity","windSpeed","windDeg","error","API_KEY","App","state","undefined","_callee","e","api_response","api_response_info","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","_this","setState","main","temp","sys","wind","speed","deg","weather","stop","titles","components_forms","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.070463cb.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Titles extends React.Component {\n  render() {\n    return (\n      <div>\n        <h1>Weather App by a Cat</h1>\n        <h3>Let the Cat drag weather information from your beloved city.. </h3>\n      </div>\n    );\n  }\n};\n\nexport default Titles;\n","import React from \"react\";\n\nclass Forms extends React.Component {\n  render() {\n    return (\n      <form onSubmit={this.props.getWeatherData}>\n        <input type=\"text\" name=\"city\" placeholder=\"city...\"/>\n        <input type=\"text\" name=\"country\" placeholder=\"country...\"/>\n        <button>Get Weather</button>\n      </form>\n    );\n  }\n};\n\nexport default Forms;\n","import React from \"react\";\n\nclass Weather extends React.Component {\n  render() {\n    return (\n      <div>\n        {\n          this.props.city && this.props.country && <p className=\"attribute\"> Location:\n            <span className=\"value\"> {this.props.city}, {this.props.country} </span>\n          </p>\n        }\n        {\n          this.props.temperature && <p className=\"attribute\"> Temperature:\n            <span className=\"value\"> {this.props.temperature} </span>\n          </p>\n        }\n        {\n          this.props.description && <p className=\"attribute\"> Condition:\n            <span className=\"value\"> {this.props.description} </span>\n           </p>\n        }\n        {\n          this.props.humidity && <p className=\"attribute\"> Humidity:\n            <span className=\"value\"> {this.props.humidity} </span>\n          </p>\n        }\n        {\n          this.props.windSpeed && this.props.windDeg  && <p className=\"attribute\"> Wind:\n            <span className=\"value\"> {this.props.windSpeed}, {this.props.windDeg} </span>\n          </p>\n        }\n        {\n          this.props.error && <p className=\"error\">{this.props.error}</p>\n        }\n      </div>\n    );\n  }\n};\n\nexport default Weather;\n","import React from \"react\"; // import React object from react package\n\nimport Titles from \"./components/titles\";\nimport Forms from \"./components/forms\";\nimport Weather from \"./components/weather\";\n\nconst API_KEY = \"0541e132ca7f9757d2c2e10f6380bbdc\";\n\n//initializing component\nclass App extends React.Component {\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    windSpeed: undefined,\n    windDeg: undefined,\n    description: undefined,\n    error: undefined\n  }\n  // functions to get weather information\n  getWeatherData = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const api_response = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\n    const api_response_info = await api_response.json();\n    if (city && country) {\n      this.setState({\n        temperature: api_response_info.main.temp,\n        city: api_response_info.name,\n        country: api_response_info.sys.country,\n        humidity: api_response_info.main.humidity,\n        windSpeed: api_response_info.wind.speed,\n        windDeg: api_response_info.wind.deg,\n        description: api_response_info.weather[0].description,\n        error: \"\"\n      });\n    }\n    else {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        windSpeed: undefined,\n        windDeg: undefined,\n        description: undefined,\n        error: \"Please enter name of the City and Country.\"\n      });\n    }\n  }\n\n  //to display the data in the component\n  render() {\n    return (\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-sm-12 title-block\">\n                  <Titles />\n                </div>\n              </div>\n              <div className=\"row\">\n                <div className=\"col-sm-12 form-block\">\n                  <Forms getWeatherData={this.getWeatherData} />\n                </div>\n              </div>\n              <div className=\"row\">\n                <div className=\"col-sm-12 weather_block\">\n                  <Weather\n                      temperature={this.state.temperature}\n                      city={this.state.city}\n                      country={this.state.country}\n                      humidity={this.state.humidity}\n                      windSpeed={this.state.windSpeed}\n                      windDeg={this.state.windDeg}\n                      description={this.state.description}\n                      error={this.state.error}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n};\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport App from './App'; //importing the App component from App.js\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root')); //ReactDOM renders App to the div 'root'\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}